# The build-stage image:
FROM continuumio/miniconda3 AS build

# Install conda-pack:
RUN conda install -c conda-forge conda-pack -y

COPY perceptree_env.yaml .

RUN conda env create -f perceptree_env.yaml
# Use conda-pack to create a standalone enviornment
# in /venv:
RUN conda-pack -n timbertrack -o /tmp/env.tar && \
  mkdir /venv && cd /venv && tar xf /tmp/env.tar && \
  rm /tmp/env.tar

# We've put venv in same path it'll be in final image,
# so now fix up paths:
RUN /venv/bin/conda-unpack

COPY . /app 

FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04
# use an older system (18.04) to avoid opencv incompatibility (issue#3524)

# Copy /venv from the previous stage:
COPY --from=build /venv /venv

SHELL ["/bin/bash", "-c"]
RUN source /venv/bin/activate
ENV PATH="/venv/bin:${PATH}"
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -y \
	python3-opencv ca-certificates python3-dev git wget sudo ninja-build \
    ffmpeg redis 

ENV CUDA_HOME='/usr/local/cuda-11.1'
# create a non-root user
ARG USER_ID=1000
RUN useradd -m --no-log-init --system  --uid ${USER_ID} appuser -g sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
USER appuser
# WORKDIR /home/appuser

ENV DEBIAN_FRONTEND noninteractive
ENV FVCORE_CACHE="/tmp"
ENV FORCE_CUDA="1"
# This will by default build detectron2 for all common cuda architectures and take a lot more time,
# because inside `docker build`, there is no way to tell which architecture will be used.
ARG TORCH_CUDA_ARCH_LIST="Kepler;Kepler+Tesla;Maxwell;Maxwell+Tegra;Pascal;Volta;Turing"
ENV TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}"

# ENV PATH="/home/appuser/.local/bin:${PATH}"
# RUN wget https://bootstrap.pypa.io/pip/3.7/get-pip.py && \
#     python3 get-pip.py --user && \
# 	rm get-pip.py

# # install dependencies
# # See https://pytorch.org/ for other options if you use a different version of CUDA

RUN /venv/bin/pip install --user torch==1.10 torchvision==0.11.1 -f https://download.pytorch.org/whl/cu111/torch_stable.html

RUN /venv/bin/pip install --user 'git+https://github.com/facebookresearch/fvcore'
# install detectron2
RUN /venv/bin/pip install --user 'detectron2 @ git+https://github.com/facebookresearch/detectron2.git'
# set FORCE_CUDA because during `docker build` cuda is not accessible

# RUN pip install --user -e detectron2_repo

# Set a fixed model cache directory.
ENV FVCORE_CACHE="/tmp"

WORKDIR /app
CMD ["/venv/bin/python3", "/app/detection_app.py"]